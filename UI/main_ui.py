# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

names = [
    '湿垃圾/菜梆子_叶',
    '干垃圾/快递袋',
    '干垃圾/一次性快餐盒',
    '可回收物/饮料盒',
    '可回收物/食用油桶',
    '有害垃圾/过期药品',
    '可回收物/金属食品罐头',
    '可回收物/金属厨具及小家电',
    '可回收物/纸质书籍',
    '湿垃圾/削皮水果',
    '可回收物/塑料厨具',
    '可回收物/塑料餐具',
    '干垃圾/插线',
    '干垃圾/污渍纸张',
    '干垃圾/污渍塑料',
    '湿垃圾/茶叶渣',
    '干垃圾/袋子',
    '干垃圾/烟蒂',
    '可回收物/瓦楞纸箱',
    '干垃圾/陶瓷器皿',
    '湿垃圾/筷子',
    '干垃圾/调料瓶',
    '干垃圾/砧板',
    '可回收物/饮料瓶',
    '干垃圾/干电池',
    '湿垃圾/蛋壳',
    '干垃圾/花盆',
    '可回收物/玻璃器皿',
    '湿垃圾/剩菜剩饭',
    '可回收物/金属器皿',
    '有害垃圾/药膏',
    '可回收物/旧衣物',
    '可回收物/平底锅',
    '干垃圾/纸袋',
    '干垃圾/枕头',
    '可回收物/塑料衣架',
    '可回收物/塑料玩具',
    '可回收物/易拉罐',
    '干垃圾/充电宝',
    '可回收物/鞋子',
    '干垃圾/填充玩具',
    '干垃圾/牙签',
    '干垃圾/毛巾',
    '干垃圾/垃圾桶',
    '干垃圾/洗漱用品',
    '可回收物/酒瓶'
]

import sys
import image.login_rc
import cv2
import torch
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5.QtWidgets import QSizePolicy, QFileDialog


def conver2Qimage(img):
    height, width, channel = img.shape
    return QImage(img, width, height, width * channel, QImage.Format_RGB888)


class Ui_main_ui(object):
    def __init__(self):
        super().__init__()
        # 加载模型
        self.model = torch.hub.load('../', 'custom', '../best.pt', source='local')

    def setupUi(self, main_ui):
        main_ui.setObjectName("main_ui")
        main_ui.resize(1147, 689)
        self.centralwidget = QtWidgets.QWidget(main_ui)
        self.centralwidget.setObjectName("centralwidget")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(0, 0, 1147, 666))
        self.listWidget.setStyleSheet("border-image: url(:/login.jpg);\n"
                                      "border-radius:10px;")
        self.listWidget.setObjectName("listWidget")
        self.listView = QtWidgets.QListView(self.centralwidget)
        self.listView.setGeometry(QtCore.QRect(0, 0, 1147, 666))
        self.listView.setStyleSheet("background-color: rgba(81, 81, 81,0.25);\n"
                                    "border-radius:10px;")
        self.listView.setObjectName("listView")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(270, 28, 565, 64))
        font = QtGui.QFont()
        font.setFamily("华文新魏")
        font.setPointSize(28)
        font.setBold(True)
        self.label.setFont(font)
        self.label.setStyleSheet("background-color: rgba(236,245,250,0.7);\n"
                                 "color: rgb(0, 0, 0);\n"
                                 "border: 1px solid rgb(179,216,250);\n"
                                 "border-radius:12px;\n"
                                 "font-weight: bold;")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(486, 147, 31, 449))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(102, 168, 337, 337))
        font = QtGui.QFont()
        font.setFamily("华文中宋")
        font.setPointSize(24)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("background-color: rgba(166, 164, 161,0.6);\n"
                                   "border-radius:30px;\n"
                                   "\n"
                                   "color: rgb(255, 255, 255);\n"
                                   "QLineEdit {\n"
                                   "    font-weight: bold; /* 给文本框控件的字体加粗 */\n"
                                   "}\n"
                                   "\n"
                                   "\n"
                                   "\n"
                                   "")
        self.label_2.setLineWidth(2)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(564, 161, 343, 337))
        font = QtGui.QFont()
        font.setFamily("华文中宋")
        font.setPointSize(24)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("background-color: rgba(166, 164, 161,0.6);\n"
                                   "border-radius:30px;\n"
                                   "\n"
                                   "color: rgb(255, 255, 255);\n"
                                   "QLineEdit {\n"
                                   "    font-weight: bold; /* 给文本框控件的字体加粗 */\n"
                                   "}")
        self.label_3.setLineWidth(2)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(948, 161, 157, 57))
        font = QtGui.QFont()
        font.setFamily("华文行楷")
        font.setPointSize(20)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("border-image: url(:/buton.png);")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(948, 252, 163, 57))
        font = QtGui.QFont()
        font.setFamily("华文行楷")
        font.setPointSize(20)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("border-image: url(:/buton.png);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(954, 350, 157, 57))
        font = QtGui.QFont()
        font.setFamily("华文行楷")
        font.setPointSize(20)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setStyleSheet("border-image: url(:/buton.png);")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(954, 448, 157, 57))
        font = QtGui.QFont()
        font.setFamily("华文行楷")
        font.setPointSize(20)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setStyleSheet("border-image: url(:/buton.png);")
        self.pushButton_4.setObjectName("pushButton_4")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(96, 539, 343, 50))
        font = QtGui.QFont()
        font.setFamily("华文新魏")
        font.setPointSize(20)
        font.setBold(True)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("background-color: rgb(236,245,250);\n"
                                   "color: rgb(0, 0, 0);\n"
                                   "border: 1px solid rgb(179,216,250);\n"
                                   "border-radius:12px;\n"
                                   "font-weight: bold;")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(564, 539, 500, 50))
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("华文新魏")
        font.setPointSize(15)
        font.setBold(True)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("background-color: rgb(236,245,250);\n"
                                   "color: rgb(0, 0, 0);\n"
                                   "border: 1px solid rgb(179,216,250);\n"
                                   "border-radius:12px;\n"
                                   "font-weight: bold;")
        self.label_5.setObjectName("label_5")
        main_ui.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(main_ui)
        self.statusbar.setObjectName("statusbar")
        main_ui.setStatusBar(self.statusbar)

        self.retranslateUi(main_ui)
        QtCore.QMetaObject.connectSlotsByName(main_ui)

        self.timer = QTimer(main_ui)
        self.timer.timeout.connect(self.update_video_frame)

        self.timer2 = QTimer(main_ui)
        self.timer2.timeout.connect(self.update_detect_video)

        self.label.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Ignored)
        self.label_2.setScaledContents(True)
        self.label_3.setScaledContents(True)

        # 设置按钮绑定
        self.pushButton.clicked.connect(self.load_image)
        self.pushButton_2.clicked.connect(self.detect_image)
        self.pushButton_3.clicked.connect(self.load_video)
        self.pushButton_4.clicked.connect(self.detect_video)

    '''设置按钮功能'''

    # 1)加载图片
    def load_image(self):
        file_path, _ = QFileDialog.getOpenFileName(self.centralwidget, "选择图片", "",
                                                   "Image Files (*.jpg *.png *.jpeg)")
        if file_path:
            # 设置检测图片路径为当前图片路径
            self.detect_image_path = file_path
            pixmap = QPixmap(file_path)
            self.label_2.setPixmap(pixmap)

    # 2)检测图片
    def detect_image(self):
        if hasattr(self, 'detect_image_path') and self.detect_image_path:
            # 显示检测结果
            result = self.model(self.detect_image_path)
            pred = result.get_objects()
            pre_img = conver2Qimage(result.render()[0])
            r = f"推理速度：{result.get_time()[1]:.2f}ms"
            self.label_4.setText(r)
            self.label_3.setPixmap(QPixmap.fromImage(pre_img))
            show_list = []
            cof = 0
            if pred:
                for i in pred:
                    if i[1] > cof:
                        cof = i[0]
                    show_list.append(names[i[0]])
                    print(names[i[0]])
                cab = ','.join(show_list)
                self.label_5.setText(f"类别：{cab}  置信度{i[1]:.2f}")

    # 3)加载视频
    def load_video(self):
        file_path, _ = QFileDialog.getOpenFileName(self.centralwidget, "选择视频", "", "Video Files (*.mp4)")
        if file_path:
            self.detect_video_path = file_path
            self.cap = cv2.VideoCapture(file_path)
            self.timer.start(3)  # 设置定时器刷新间隔为30毫秒，即每秒刷新30次

    def detect_video(self):
        # 检测视频路径是否存在
        if hasattr(self, 'detect_video_path') and self.detect_video_path:
            # 显示检测结果
            video = cv2.VideoCapture(self.detect_video_path)
            self.timer2.start(3)

    def update_video_frame(self):
        ret, frame = self.cap.read()
        if ret:
            rgbImage = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            h, w, ch = rgbImage.shape
            bytesPerLine = ch * w
            convertToQtFormat = QImage(rgbImage.data, w, h, bytesPerLine, QImage.Format_RGB888)
            pixmap = QPixmap.fromImage(convertToQtFormat)
            self.label_2.setPixmap(pixmap)
        else:
            self.timer.stop()
            self.cap.release()

    def update_detect_video(self):
        ret, frame = self.cap.read()
        if ret:
            rgbImage = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            result = self.model(rgbImage)
            pred = result.get_objects()
            pre_img = conver2Qimage(result.render()[0])
            r = f"推理速度{result.get_time()[1]:.2f}ms"
            self.label_4.setText(r)
            self.label_3.setPixmap(QPixmap.fromImage(pre_img))
            # print(pred)
            if pred:
                for i in pred:
                    self.label_5.setText(f"类别：{names[i[0]]}  置信度{i[1]:.2f}")

        else:
            self.timer2.stop()
            self.cap.release()

    # 4)检测视频

    def retranslateUi(self, main_ui):
        _translate = QtCore.QCoreApplication.translate
        main_ui.setWindowTitle(_translate("main_ui", "wu人问津"))
        self.label.setText(_translate("main_ui", "垃圾识别管理系统"))
        self.label_2.setText(_translate("main_ui", "原始图片/视频"))
        self.label_3.setText(_translate("main_ui", "检测结果"))
        self.pushButton.setText(_translate("main_ui", "导入图片"))
        self.pushButton_2.setText(_translate("main_ui", "检测图片"))
        self.pushButton_3.setText(_translate("main_ui", "导入视频"))
        self.pushButton_4.setText(_translate("main_ui", "检测视频"))
        self.label_4.setText(_translate("main_ui", "推理速度"))
        self.label_5.setText(_translate("main_ui", "识别的类型"))


if __name__ == '__main__':
    app = QApplication(sys.argv)
    main_ui = QMainWindow()
    ui = Ui_main_ui()
    ui.setupUi(main_ui)
    main_ui.show()
    sys.exit(app.exec_())
